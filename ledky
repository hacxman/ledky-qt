#!/usr/bin/python

import sys
import struct
from PyQt4 import QtCore, QtGui, uic, QtDBus, QtSql
import socket


class UI(QtGui.QMainWindow):
  def __init__(self, *args):
    super(UI, self).__init__(*args)

    self.server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    self.server.connect((sys.argv[1], int(sys.argv[2])))

    self.timer = QtCore.QTimer()
    QtCore.QObject.connect(self.timer, QtCore.SIGNAL("timeout()"), self.on_timer_timeout)

    uic.loadUi('mainwindow.ui', self)

#  @QtCore.pyqtSlot()
  def on_timer_timeout(self):
    self.horizontalSlider.setValue((self.horizontalSlider.value()+self.spnInc.value()) % 500)
    print 'kokt'

  def write_color_array(self, r, g, b):
    #sys.stdout.write('a')
    #sys.stdout.flush()
    self.server.sendall('a')
    data = struct.pack('='+'BBB'*240, *[b,g,r]*240)
    self.server.sendall(data)
    #sys.stdout.write(data)
    #sys.stdout.flush()

  @QtCore.pyqtSlot()
  def on_pushButton_clicked(self):
    self.server.sendall('x')
    d = self.server.recv(4)
    cnt = struct.unpack('=i', d)
    self.label_5.setText('Leds: ' + str(cnt))

  @QtCore.pyqtSlot(int)
  def on_horizontalSlider_valueChanged(self, num):
#    sys.stdout.write('r')
#    sys.stdout.flush()
    self.server.sendall('r')
    data = struct.pack('=i', num)
    sys.stderr.write("{} {}\n".format(num, len(data)))
#    sys.stdout.write(data)
    self.server.sendall(data)
#    sys.stdout.flush()
    self.label.setText(str(num))

  @QtCore.pyqtSlot(int)
  def on_horizontalSlider_2_valueChanged(self, num):
    self.label_2.setText(str(num))
    self.write_color_array(int(self.label_2.text()),
      int(self.label_3.text()),
      int(self.label_4.text()))

  @QtCore.pyqtSlot(int)
  def on_horizontalSlider_3_valueChanged(self, num):
    self.label_3.setText(str(num))
    self.write_color_array(int(self.label_2.text()),
      int(self.label_3.text()),
      int(self.label_4.text()))

  @QtCore.pyqtSlot(int)
  def on_horizontalSlider_4_valueChanged(self, num):
    self.label_4.setText(str(num))
    self.write_color_array(int(self.label_2.text()),
      int(self.label_3.text()),
      int(self.label_4.text()))

  @QtCore.pyqtSlot(float)
  def on_spnSpeed_valueChanged(self, num):
    self.timer.setInterval(num)


  @QtCore.pyqtSlot(bool)
  def on_chkCycle_toggled(self, val):
    if val:
      self.timer.start(self.spnSpeed.value())
    else:
      self.timer.stop()

if __name__ == "__main__":
  app = QtGui.QApplication(sys.argv)

  w = UI()

  if '-off' in sys.argv:
    w.write_color_array(0,0,0)

  if '-q' in sys.argv:
    exit(0)

  w.show()
  w.setVisible(True)

  sys.exit(app.exec_())
